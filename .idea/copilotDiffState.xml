<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/kotlin/com/example/adminapp/ui/auth/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/kotlin/com/example/adminapp/ui/auth/AuthViewModel.kt" />
              <option name="originalContent" value="package com.example.adminapp.ui.auth&#10;&#10;import android.content.Context&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import com.example.adminapp.core.supabase&#10;import android.util.Log&#10;import androidx.core.content.edit&#10;import com.example.adminapp.data.model.auth.AuthDtos&#10;import com.example.adminapp.data.repository.AuthRepository&#10;import io.github.jan.supabase.postgrest.from&#10;import io.github.jan.supabase.auth.auth&#10;&#10;&#10;&#10;class AuthViewModel : ViewModel() {&#10;&#10;    private val authRepository = AuthRepository()&#10;    &#10;    var isLoading by mutableStateOf(false)&#10;        private set&#10;&#10;    var authError by mutableStateOf&lt;String?&gt;(null)&#10;    var isSignUpSuccess by mutableStateOf&lt;Boolean?&gt;(null)&#10;        private set&#10;&#10;    suspend fun countUsersByEmail(email: String): Int = authRepository.countAdminUsersByEmail(email);&#10;&#10;    fun signIn(email: String, password: String, context: Context,onSuccess: () -&gt; Unit) {&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            try {&#10;                val user =  authRepository.signInAdmin(email, password)&#10;                if (user != null){&#10;                    val sharedPref = context.getSharedPreferences(&quot;user_session&quot;, Context.MODE_PRIVATE)&#10;                    val userId = user.id&#10;                    val userName = user.name&#10;                    sharedPref.edit {&#10;                        putString(&quot;user_id&quot;, userId)&#10;                        putString(&quot;username&quot;, userName)&#10;                    }&#10;&#10;                    // Generate and upload FCM token for push notifications&#10;                    withContext(Dispatchers.Main) {&#10;                        authRepository.uploadFcmToken(context, userId)&#10;                    }&#10;&#10;                    withContext(Dispatchers.Main) {&#10;                        onSuccess()&#10;                    }&#10;                }else{&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;Sign in failed - No user returned&quot;)&#10;                    authError = &quot;Không tìm thấy thông tin người dùng&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Sign in error: ${e.message}&quot;, e)&#10;                authError = &quot;Đăng nhập thất bại: ${e.message}&quot;&#10;            } finally {&#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun signUp(&#10;        email: String,&#10;        password: String,&#10;        address: String,&#10;        name: String,&#10;        phoneNumber: String,&#10;        onSuccess: () -&gt; Unit&#10;    ) {&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            try {&#10;                val role = &quot;admin&quot;&#10;                val check = countUsersByEmail(email)&#10;                if (check == 0){&#10;                    val newUser = AuthDtos.UsersSignUp(&#10;                        email = email,&#10;                        password = password,&#10;                        role = role,&#10;                        address = address,&#10;                        name = name,&#10;                        phoneNumber = phoneNumber,&#10;                        lock = &quot;active&quot; // Thêm lock khi đăng ký&#10;                    )&#10;                    authRepository.signUpAdmin(newUser)&#10;                    withContext(Dispatchers.Main) {&#10;                        onSuccess()&#10;                    }&#10;                }else{&#10;                    authError = &quot;Email đã được đăng ký trước đó&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Sign up error: ${e.message}&quot;, e)&#10;                authError = &quot;Đăng ký thất bại: ${e.message}&quot;&#10;            } finally {&#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun clearError() {&#10;        authError = null&#10;    }&#10;&#10;    /**&#10;     * Hàm xử lý đăng xuất hoàn chỉnh&#10;     * - Xóa tất cả dữ liệu SharedPreferences&#10;     * - Xóa Supabase auth session&#10;     * - Xóa FCM token khỏi database (tùy chọn)&#10;     */&#10;    fun logout(context: Context, onLogoutComplete: () -&gt; Unit) {&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Starting logout process...&quot;)&#10;                &#10;                // 1. Lấy thông tin user trước khi xóa SharedPreferences&#10;                val sharedPref = context.getSharedPreferences(&quot;user_session&quot;, Context.MODE_PRIVATE)&#10;                val userId = sharedPref.getString(&quot;user_id&quot;, null)&#10;                &#10;                // 2. Xóa FCM token khỏi database (tùy chọn)&#10;                if (!userId.isNullOrEmpty()) {&#10;                    try {&#10;                        supabase.from(&quot;user_push_tokens&quot;)&#10;                            .delete {&#10;                                filter {&#10;                                    eq(&quot;user_id&quot;, userId)&#10;                                }&#10;                            }&#10;                        Log.d(&quot;AuthViewModel&quot;, &quot;FCM tokens deleted for user: $userId&quot;)&#10;                    } catch (e: Exception) {&#10;                        Log.w(&quot;AuthViewModel&quot;, &quot;Could not delete FCM tokens: ${e.message}&quot;)&#10;                        // Không throw error vì việc này không quan trọng lắm&#10;                    }&#10;                }&#10;                &#10;                // 3. Xóa tất cả dữ liệu SharedPreferences&#10;                withContext(Dispatchers.Main) {&#10;                    sharedPref.edit{&#10;                        clear()&#10;                    }&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;SharedPreferences cleared&quot;)&#10;                }&#10;                &#10;                // 4. Xóa Supabase auth session&#10;                try {&#10;                    supabase.auth.signOut()&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;Supabase session cleared&quot;)&#10;                } catch (e: Exception) {&#10;                    Log.w(&quot;AuthViewModel&quot;, &quot;Could not clear Supabase session: ${e.message}&quot;)&#10;                    // Tiếp tục logout dù có lỗi&#10;                }&#10;                &#10;                // 5. Reset các state variables&#10;                withContext(Dispatchers.Main) {&#10;                    authError = null&#10;                    isSignUpSuccess = null&#10;                    isLoading = false&#10;                    &#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;Logout completed successfully&quot;)&#10;                    onLogoutComplete()&#10;                }&#10;                &#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Error during logout: ${e.message}&quot;, e)&#10;                &#10;                // Ngay cả khi có lỗi, vẫn cố gắng xóa SharedPreferences và navigate&#10;                withContext(Dispatchers.Main) {&#10;                    try {&#10;                        val sharedPref = context.getSharedPreferences(&quot;user_session&quot;, Context.MODE_PRIVATE)&#10;                        sharedPref.edit {&#10;                            clear()&#10;                        }&#10;                        Log.d(&quot;AuthViewModel&quot;, &quot;SharedPreferences cleared (fallback)&quot;)&#10;                    } catch (clearError: Exception) {&#10;                        Log.e(&quot;AuthViewModel&quot;, &quot;Failed to clear SharedPreferences: ${clearError.message}&quot;)&#10;                    }&#10;                    &#10;                    authError = null&#10;                    isSignUpSuccess = null&#10;                    isLoading = false&#10;                    onLogoutComplete()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.adminapp.ui.auth&#10;&#10;import android.content.Context&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import com.example.adminapp.core.supabase&#10;import android.util.Log&#10;import androidx.core.content.edit&#10;import com.example.adminapp.data.model.auth.UsersSignUp&#10;import com.example.adminapp.data.repository.AuthRepository&#10;import io.github.jan.supabase.postgrest.from&#10;import io.github.jan.supabase.auth.auth&#10;&#10;&#10;&#10;class AuthViewModel : ViewModel() {&#10;&#10;    private val authRepository = AuthRepository()&#10;    &#10;    var isLoading by mutableStateOf(false)&#10;        private set&#10;&#10;    var authError by mutableStateOf&lt;String?&gt;(null)&#10;    var isSignUpSuccess by mutableStateOf&lt;Boolean?&gt;(null)&#10;        private set&#10;&#10;    suspend fun countUsersByEmail(email: String): Int = authRepository.countAdminUsersByEmail(email);&#10;&#10;    fun signIn(email: String, password: String, context: Context,onSuccess: () -&gt; Unit) {&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            try {&#10;                val user =  authRepository.signInAdmin(email, password)&#10;                if (user != null){&#10;                    val sharedPref = context.getSharedPreferences(&quot;user_session&quot;, Context.MODE_PRIVATE)&#10;                    val userId = user.id&#10;                    val userName = user.name&#10;                    sharedPref.edit {&#10;                        putString(&quot;user_id&quot;, userId)&#10;                        putString(&quot;username&quot;, userName)&#10;                    }&#10;&#10;                    // Generate and upload FCM token for push notifications&#10;                    withContext(Dispatchers.Main) {&#10;                        authRepository.uploadFcmToken(context, userId)&#10;                    }&#10;&#10;                    withContext(Dispatchers.Main) {&#10;                        onSuccess()&#10;                    }&#10;                }else{&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;Sign in failed - No user returned&quot;)&#10;                    authError = &quot;Không tìm thấy thông tin người dùng&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Sign in error: ${e.message}&quot;, e)&#10;                authError = &quot;Đăng nhập thất bại: ${e.message}&quot;&#10;            } finally {&#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun signUp(&#10;        email: String,&#10;        password: String,&#10;        address: String,&#10;        name: String,&#10;        phoneNumber: String,&#10;        onSuccess: () -&gt; Unit&#10;    ) {&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            try {&#10;                val role = &quot;admin&quot;&#10;                val check = countUsersByEmail(email)&#10;                if (check == 0){&#10;                    val newUser = UsersSignUp(&#10;                        email = email,&#10;                        password = password,&#10;                        role = role,&#10;                        address = address,&#10;                        name = name,&#10;                        phoneNumber = phoneNumber,&#10;                        lock = &quot;active&quot; // Thêm lock khi đăng ký&#10;                    )&#10;                    authRepository.signUpAdmin(newUser)&#10;                    withContext(Dispatchers.Main) {&#10;                        onSuccess()&#10;                    }&#10;                }else{&#10;                    authError = &quot;Email đã được đăng ký trước đó&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Sign up error: ${e.message}&quot;, e)&#10;                authError = &quot;Đăng ký thất bại: ${e.message}&quot;&#10;            } finally {&#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun clearError() {&#10;        authError = null&#10;    }&#10;&#10;    /**&#10;     * Hàm xử lý đăng xuất hoàn chỉnh&#10;     * - Xóa tất cả dữ liệu SharedPreferences&#10;     * - Xóa Supabase auth session&#10;     * - Xóa FCM token khỏi database (tùy chọn)&#10;     */&#10;    fun logout(context: Context, onLogoutComplete: () -&gt; Unit) {&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Starting logout process...&quot;)&#10;                &#10;                // 1. Lấy thông tin user trước khi xóa SharedPreferences&#10;                val sharedPref = context.getSharedPreferences(&quot;user_session&quot;, Context.MODE_PRIVATE)&#10;                val userId = sharedPref.getString(&quot;user_id&quot;, null)&#10;                &#10;                // 2. Xóa FCM token khỏi database (tùy chọn)&#10;                if (!userId.isNullOrEmpty()) {&#10;                    try {&#10;                        supabase.from(&quot;user_push_tokens&quot;)&#10;                            .delete {&#10;                                filter {&#10;                                    eq(&quot;user_id&quot;, userId)&#10;                                }&#10;                            }&#10;                        Log.d(&quot;AuthViewModel&quot;, &quot;FCM tokens deleted for user: $userId&quot;)&#10;                    } catch (e: Exception) {&#10;                        Log.w(&quot;AuthViewModel&quot;, &quot;Could not delete FCM tokens: ${e.message}&quot;)&#10;                        // Không throw error vì việc này không quan trọng lắm&#10;                    }&#10;                }&#10;                &#10;                // 3. Xóa tất cả dữ liệu SharedPreferences&#10;                withContext(Dispatchers.Main) {&#10;                    sharedPref.edit{&#10;                        clear()&#10;                    }&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;SharedPreferences cleared&quot;)&#10;                }&#10;                &#10;                // 4. Xóa Supabase auth session&#10;                try {&#10;                    supabase.auth.signOut()&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;Supabase session cleared&quot;)&#10;                } catch (e: Exception) {&#10;                    Log.w(&quot;AuthViewModel&quot;, &quot;Could not clear Supabase session: ${e.message}&quot;)&#10;                    // Tiếp tục logout dù có lỗi&#10;                }&#10;                &#10;                // 5. Reset các state variables&#10;                withContext(Dispatchers.Main) {&#10;                    authError = null&#10;                    isSignUpSuccess = null&#10;                    isLoading = false&#10;                    &#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;Logout completed successfully&quot;)&#10;                    onLogoutComplete()&#10;                }&#10;                &#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Error during logout: ${e.message}&quot;, e)&#10;                &#10;                // Ngay cả khi có lỗi, vẫn cố gắng xóa SharedPreferences và navigate&#10;                withContext(Dispatchers.Main) {&#10;                    try {&#10;                        val sharedPref = context.getSharedPreferences(&quot;user_session&quot;, Context.MODE_PRIVATE)&#10;                        sharedPref.edit {&#10;                            clear()&#10;                        }&#10;                        Log.d(&quot;AuthViewModel&quot;, &quot;SharedPreferences cleared (fallback)&quot;)&#10;                    } catch (clearError: Exception) {&#10;                        Log.e(&quot;AuthViewModel&quot;, &quot;Failed to clear SharedPreferences: ${clearError.message}&quot;)&#10;                    }&#10;                    &#10;                    authError = null&#10;                    isSignUpSuccess = null&#10;                    isLoading = false&#10;                    onLogoutComplete()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>