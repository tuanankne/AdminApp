package com.example.adminapp.data.repository

import com.example.adminapp.core.supabase
import com.example.adminapp.data.model.Voucher
import io.github.jan.supabase.postgrest.from
import java.text.SimpleDateFormat
import java.util.*
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class VoucherInsert(
    @SerialName("name")
    val name: String,
    
    @SerialName("describe")
    val describe: String,
    
    @SerialName("discount")
    val discount: Float,
    
    @SerialName("status")
    val status: String,
    
    @SerialName("created_at")
    val created_at: String,
    
    @SerialName("date")
    val date: String? = null
)

class VoucherRepository {
    
    private fun getCurrentTimestamp(): String {
        return SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())
    }
    
    suspend fun getVouchers(): List<Voucher> {
        return try {
            println("=== FETCHING VOUCHERS ===")
            val result = supabase.from("vouchers")
                .select()
                .decodeList<Voucher>()
            
            println("Successfully fetched ${result.size} vouchers")
            result.forEach { voucher ->
                println("Voucher: id=${voucher.id}, name='${voucher.name}', discount=${voucher.discount}, status='${voucher.status}'")
            }
            
            result.sortedByDescending { it.id }
        } catch (e: Exception) {
            println("Error fetching vouchers: ${e.message}")
            e.printStackTrace()
            emptyList()
        }
    }
    
    suspend fun addVoucher(
        name: String,
        describe: String,
        discount: Float,
        date: String? = null
    ): Boolean {
        return try {
            println("=== ADDING NEW VOUCHER ===")
            println("Name: $name, Describe: $describe, Discount: $discount%, Date: '$date'")
            println("Date is null: ${date == null}")
            println("Date is blank: ${date?.isBlank()}")
            println("Date length: ${date?.length}")
            
            // Create voucher object without id (auto-generated by database)
            val currentTime = getCurrentTimestamp()
            val finalDate = if (date != null && date.isNotBlank()) {
                println("Using date: $date")
                date
            } else {
                println("Date is null or blank, setting to null")
                null
            }
            
            val newVoucher = VoucherInsert(
                name = name,
                describe = describe,
                discount = discount,
                status = "enable",
                created_at = currentTime,
                date = finalDate
            )
            
            println("Insert data: $newVoucher")
            
            supabase.from("vouchers")
                .upsert(newVoucher)
            
            println("Successfully added new voucher")
            true
        } catch (e: Exception) {
            println("Error adding voucher: ${e.message}")
            e.printStackTrace()
            false
        }
    }
    
    suspend fun updateVoucher(
        id: Long,
        name: String,
        describe: String,
        discount: Float,
        date: String? = null
    ): Boolean {
        return try {
            println("=== UPDATING VOUCHER ===")
            println("ID: $id, Name: $name, Describe: $describe, Discount: $discount, Date: $date")
            
            // Get current voucher to preserve other fields
            val currentVouchers = supabase.from("vouchers")
                .select() {
                    filter {
                        eq("id", id)
                    }
                }
                .decodeList<Voucher>()
            
            if (currentVouchers.isNotEmpty()) {
                val currentVoucher = currentVouchers.first()
                
                val currentTime = getCurrentTimestamp()
                val updatedVoucher = Voucher(
                    id = id,
                    name = name,
                    describe = describe,
                    discount = discount,
                    status = currentVoucher.status, // Preserve current status
                    created_at = currentTime, // Update to current time
                    date = date
                )
                
                supabase.from("vouchers")
                    .update(updatedVoucher) {
                        filter {
                            eq("id", id)
                        }
                    }
            }
            
            println("Successfully updated voucher")
            true
        } catch (e: Exception) {
            println("Error updating voucher: ${e.message}")
            e.printStackTrace()
            false
        }
    }
    
    suspend fun updateVoucherStatus(id: Long, status: String): Boolean {
        return try {
            println("=== UPDATING VOUCHER STATUS ===")
            println("Voucher ID: $id, New Status: $status")
            
            supabase.from("vouchers")
                .update(mapOf("status" to status)) {
                    filter {
                        eq("id", id)
                    }
                }
            
            println("Successfully updated voucher status")
            true
        } catch (e: Exception) {
            println("Error updating voucher status: ${e.message}")
            e.printStackTrace()
            false
        }
    }
    
    suspend fun deleteVoucher(id: Long): Boolean {
        return try {
            println("=== DELETING VOUCHER ===")
            println("Voucher ID: $id")
            
            supabase.from("vouchers")
                .delete {
                    filter {
                        eq("id", id)
                    }
                }
            
            println("Successfully deleted voucher")
            true
        } catch (e: Exception) {
            println("Error deleting voucher: ${e.message}")
            e.printStackTrace()
            false
        }
    }
}